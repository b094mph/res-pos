<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<mvc:annotation-driven/>
	<!-- this is a test. -->

	<!-- To enable Spring to auto-detect the controllers you need to specify the base package of the controllers using 
		 the <context:component-scan> element in the Spring configuration file. DefaultAnnotationHandlerMapping and 
		 AnnotationMethodHandlerAdapter are preregistered in the web application context by default. But you need to 
		 explicitly register them, incase you have registered any other handler mappings or handler adapters explicitly. -->
	<context:component-scan base-package="com.example.controller" />
	<context:component-scan base-package="com.restaurant.controller"/>
    
    <!-- declare BeanNameUrlHandlerMapping is optional, by default, if Spring canâ€™t find a handler mapping, 
    	 the DispatcherServlet will create a BeanNameUrlHandlerMapping automatically. -->     
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
	
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	   <property name="mappings">
		<value>
		   /category.html=categoryController
		   /subCategory.json=subCategoryControllerJson
		   /menu.html=menuController
		</value>
	   </property>
	</bean>
	
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	    <property name="interceptors">
	        <ref bean="localeChangeInterceptor" />
	    </property>
	</bean>
	
	<!-- By default the spring mvc defines 3 different request handler adapters, they are
			org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
			org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
			org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
		So you need not have to define them in your context file, but if you define at least ONE of these handler adapter
		in your context files, then spring will not create the other default adapters. Therefore need to explictly define. -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<bean id="viewResolver"
        class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/jsp/body/" />
        <property name="suffix" value=".jsp" />
    </bean>

	<bean name="categoryController" class="com.restaurant.controller.CategoryController" autowire="byType">
		<property name="viewName" value="category"/>
		<property name="categoryService" ref="categoryService"/>
	</bean>
	
	<bean name="subCategoryControllerJson" class="com.restaurant.controller.SubCategoryController" autowire="byType">
		<property name="viewName" value="subCategoryJson"/>
		<property name="subCategoryService" ref="subCategoryService"/>
	</bean>
	
	<bean name="menuController" class="com.restaurant.controller.MenuController" autowire="byType">
		<property name="viewName" value="menu"/>
		<property name="menuService" ref="menuService"/>
	</bean>

<!-- 	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> -->
<!-- 	    <property name="viewClass"> -->
<!-- 	        <value> -->
<!-- 	            org.springframework.web.servlet.view.tiles2.TilesView -->
<!-- 	        </value> -->
<!-- 	    </property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"> -->
<!-- 	    <property name="definitions"> -->
<!-- 	        <list> -->
<!-- 	            <value>/WEB-INF/spring/spring-tiles.xml</value> -->
<!-- 	        </list> -->
<!-- 	    </property> -->
<!-- 	</bean> -->
	
<!--  	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"> -->
<!--    		<property name="basename" value="messages"/> -->
<!--  	</bean> -->
 	
 	<bean id="messageSource"
	    class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <property name="basename" value="classpath:messages" />
	    <property name="defaultEncoding" value="UTF-8"/>
	</bean>
	 
	<bean id="localeChangeInterceptor"
	    class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	    <property name="paramName" value="lang" />
	</bean>
	 
	<bean id="localeResolver"
	    class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	    <property name="defaultLocale" value="en"/>
	</bean>
	 
</beans>